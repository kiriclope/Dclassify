#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session decoder :kernel dual_data

* Notebook Settings

#+begin_src ipython
%load_ext autoreload
%autoreload 2
%reload_ext autoreload

%run /home/leon/dual_task/dual_data/notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports
#+begin_src ipython
import sys
sys.path.insert(0, '../')

from src.classificationCV import ClassificationCV
from src.main import get_classification
from src.utils import safe_roc_auc_score
#+end_src

#+RESULTS:

#+begin_src ipython
import mne
print(mne.__version__)
#+end_src

#+RESULTS:
: 1.4.2

* Synthetic data

#+begin_src ipython
from sklearn.datasets import make_classification
N_TIME = 10
X, y= [], []
# Generate synthetic dataset
for i in range(N_TIME):
    Xi, yi = make_classification(n_samples=100,    # number of samples
                               n_features=20,     # number of features
                               n_informative=2,   # number of informative features
                               n_redundant=2,     # number of redundant features
                               n_classes=2,       # number of classes
                               random_state=42)   # for reproducibility
    X.append(Xi)
# we need to add a new axis for MNE estimators to work
# ie getting a decoder for all time points

X = np.stack(X, -1)
y = yi

print('X', X.shape, 'y', y.shape)
print('labels', np.unique(y))

X_B = X[:15]
y_B = y[:15]
print('X_B', X_B.shape, 'y_B', y_B.shape)
#+end_src

#+RESULTS:
: X (100, 20, 10) y (100,)
: labels [0 1]
: X_B (15, 20, 10) y_B (15,)

* Parameters

#+begin_src ipython
  options= {
      'n_comp': None, # PCA
      'scaler': None, # standardization
      'n_boots': 1, # bootstrapping coefs
      'n_splits': 5, 'n_repeats': 1, # repeated stratified folds
      'IF_COMPO' : 0,
      'scoring': 'roc_auc', # scorer
      'mne_estimator':'sliding', # sliding or generalizing
      'verbose': 1,
      'n_jobs': 30,
  }
#+end_src

#+RESULTS:

* Classification
** Model

#+begin_src ipython
  from sklearn.linear_model import LogisticRegression
  model = LogisticRegression()

  params = {'model__C': np.logspace(-4, 4, 10)}
  params = {}

  super_model = ClassificationCV(model, params, **options)
#+end_src

#+RESULTS:

** Coefficients

#+begin_src ipython
options['verbose'] = 0
X_epoch = X[..., 0]
coefs, bias = get_classification(super_model, X_epoch, y, RETURN='coefs', **options)
#+end_src

#+RESULTS:
: Fitting hyperparameters on single epoch ...
: Elapsed (with compilation) = 0h 0m 1s
: {}
: Elapsed (with compilation) = 0h 0m 1s

** Scores

#+begin_src ipython
scores, probas, coefs = get_classification(super_model, X, y, X_B=X_B, y_B=y_B, cv_B=3, RETURN='scores', **options)
#+end_src

#+RESULTS:
: Computing cv scores ...
: 1
: 2
: 3
: Elapsed (with compilation) = 0h 0m 0s
: Elapsed (with compilation) = 0h 0m 0s

#+begin_src ipython
print(scores.shape)
#+end_src

#+RESULTS:
: (3, 2, 10)

#+begin_src ipython
print(np.array(probas).shape)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: ValueError                                Traceback (most recent call last)
: Cell In[10], line 1
: ----> 1 print(np.array(probas).shape)
:
: ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 2 dimensions. The detected shape was (3, 2) + inhomogeneous part.
:END:

#+begin_src ipython
print(np.array(coefs).shape)
#+end_src

#+RESULTS:
: (3, 21, 1, 10)
